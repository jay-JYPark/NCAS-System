///////////////////////////////////////////////////////////
//  DbManagerBiz.cs
//  Implementation of the Class DbManagerBiz
//  Generated by Enterprise Architect
//  Created on:      17-4-2015 오후 3:21:33
//  Original author: ahnyj ahnyj
///////////////////////////////////////////////////////////




using Business.NCasBiz;
using NCasPDbManager.DBManagerBizContainers.BackupMngContainers;
using Foundation.NCasDb;
using Business.NCasBiz.NCasNetSession;
using Foundation.NCasNet;
using NCasPDbManager.BasicDataMngContainers;
using Business.NCasProtocol.NCasProtocol;
using NCasPDbManager.DBManagerBizContainers.QueryMngContrainers;
namespace NCasPDbManager.DBManagerBizContainers {
	/// <summary>
	/// DB매니저 프로그램의 기능을 구현하는 클래스
	/// </summary>
	public class DbManagerBiz : NCasBizProcess {

		/// <summary>
		/// MainForm
		/// </summary>
		private MainForm mainForm = null;
		/// <summary>
		/// TCP서버 매니저
		/// </summary>
		private NCasNetSessionServerMng tcpServerMng = null;
		/// <summary>
		/// UDP수신을 위한 소켓
		/// 기존 시도시스템에서 들어오는 데이터를 수용하기 위한 UDP
		/// </summary>
		private NCasUdpSocket udpSocket = null;
		/// <summary>
		/// 한개의 DB세션으로 작업을 처리함
		/// </summary>
		private NCasOracleDb oracleDb = null;
		/// <summary>
		/// DB 입력에 실패한 데이터를 백업하기 위한 매니저
		/// </summary>
		private BackupMng backupMng = null;
		/// <summary>
		/// 처리 카운트
		/// </summary>
		private int processingCount = 0;
		/// <summary>
		/// 대기카운트
		/// </summary>
		private int standbyCount = 0;
		public NCasPDbManager.DBManagerBizContainers.BackupMngContainers.BackupMng m_BackupMng;
		public Foundation.NCasDb.NCasOracleDb m_NCasOracleDb;
		public Business.NCasBiz.NCasNetSession.NCasNetSessionServerMng m_NCasNetSessionServerMng;
		public Foundation.NCasNet.NCasUdpSocket m_NCasUdpSocket;

		public DbManagerBiz(){

		}

		~DbManagerBiz(){

		}

		/// <summary>
		/// 생성자
		/// </summary>
		/// <param name="mainForm"></param>
		internal DbManagerBiz(MainForm mainForm){

			//this.mainForm=mainForm;


		}

		/// <summary>
		/// 처리카운트를 반환한다.
		/// </summary>
		public int GetProcessingCount(){

			return 0;
		}

		/// <summary>
		/// 처리, 대기카운트를 설정한다.
		/// </summary>
		private void SetProcessingStandbyCount(){

			//processingCount++;
			//standbyCount=큐카운트;


		}

		/// <summary>
		/// 대기카운트를 반환한다.
		/// </summary>
		public int GetStandbyCount(){

			return 0;
		}

		/// <summary>
		/// 처리카운트를 초기화 한다.
		/// </summary>
		public void ResetProcessingCount(){

		}

		/// <summary>
		/// TC13, TC14를 처리한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc13Tc14(NcasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//QueryMng.GetUpdateTermStatusHistQuery();
			//
			//QueryMng.InsertTermStatusHistQuery();
			//QueryMng.GetUpdateTermStatusHistQuery();
			//
			//QueryMng.InsertTermStatusHistQuery();



		}

		/// <summary>
		/// 방송회선 점검 결과데이터를 처리하는 함수
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc22Tc30(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoDataToIp();
			//QueryMng.
			//GetInsertVoiceLineTestResultHistQuery();
			//



		}

		/// <summary>
		/// 장비이상정보인 TC8과 TC88을 처리하는 함수
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc8Tc88(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//switch(NCasDefineAbnormalStatus)
			//case NCasDefineAbnormalStatus.ABNORMAL:
			//
			//GetCheckHaveFaultDeviceDataQuery();
			//GetInsertFaultDeviceDataQuery();
			//case NCasDefineAbnormalStatus.NORMAL:
			//GetUpdateFaultDeviceDataQuery();



		}

		/// <summary>
		/// 경보발령 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc1(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//QueryMng.GetCheckHaveOrderHistQuery();
			//QueryMng.GetInsertAlarmOrderHistQuery();
			//
			//QueryMng.GetInsertAlarmRespHistQuery();
			//QueryMng.
			//GetInsertAlarmResultHistQuery();
			//QueryMng.
			//GetCheckHavePreAlarmRespResultHistQuery(
			//);
			//QueryMng.
			//GetUpdateAlarmRespResultHistQuery();
			//QueryMng.
			//GetTc1CheckHavePreRespResultHistQuery();
			//
			//QueryMng.
			//GetTc1UpdateRespResultHistQuery();



		}

		/// <summary>
		/// 경보응답 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc2(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//QueryMng.
			//GetCheckHaveAlarmRespResultHistQuery();
			//QueryMng.
			//GetUpdateAlarmRespResultHistQuery();
			//QueryMng.
			//GetInsertPreAlarmRespResultHistQuery();



		}

		/// <summary>
		/// 경보결과 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc3(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//QueryMng.
			//GetCheckHaveAlarmRespResultHistQuery();
			//QueryMng.
			//GetUpdateAlarmRespResultHistQuery();
			//QueryMng.GetInsertAlarmOrderHistQuery();
			//
			//QueryMng.
			//GetInsertAlarmRespResultHistQuery();
			//QueryMng.
			//GetInsertPreAlarmRespResultHistQuery();



		}

		/// <summary>
		/// 방송발령 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc4(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetBroadMasterInfoData();
			//QueryMng.
			//GetCheckHaveBroadOrderHistQuery();
			//QueryMng.GetInsertBroadOrderHistQuery();
			//
			//QueryMng.
			//GetInsertPreBroadRespResultHistQuery();



		}

		/// <summary>
		/// 방송발령응답 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc5(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//QueryMng.
			//GetCheckHaveBroadRespResultHistQuery();
			//QueryMng.
			//GetUpdateBroadRespResultHistQuery();
			//QueryMng.
			//GetInsertPreBroadRespResultHistQuery();



		}

		/// <summary>
		/// 방송발령결과 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc6(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoData();
			//QueryMng.
			//GetCheckHaveBroadRespResultHistQuery();
			//GetUpdateBroadRespResultHistQuery();
			//GetInsertPreBroadRespResultHistQuery();



		}

		/// <summary>
		/// 장비감시 결과 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc8(NCasProtocolBase protoBase){

			//ProcTc8Tc88(NCasProtocolBase);


		}

		/// <summary>
		/// 단말 주변기기 상태응답 데이터를 입력한다.
		/// TC14와 동일한 작업을 한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc13(NCasProtocolBase protoBase){

			//ProcTc13Tc14();


		}

		/// <summary>
		/// 단말 주변기기 상태 이벤트 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc14(NCasProtocolBase protoBase){

			//ProcTc13Tc14();


		}

		/// <summary>
		/// 방송 캡션 전송 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc20(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetBroadMasterInfoData();
			//QueryMng.
			//GetCheckBroadCaptionHistQuery();
			//QueryMng.
			//GetInsertBroadCaptionHistQuery();



		}

		/// <summary>
		/// 위성 상태 요구 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc10(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//QeuryMng.
			//GetInsertSateTestOrderHistQuery();
			//GetInsertSateTestResultHistQuery();



		}

		/// <summary>
		/// 위성 상태 응답 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc11(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDataMng.GetMasterInfoDataToIp();
			//QueryMng.
			//GetDeleteSateTestResultHistQuery();
			//QueryMng.
			//GetUpdateSateTestResultHistQuery();



		}

		/// <summary>
		/// 방송회선 점검 요구 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc21(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BasicDatamng.GetMasterInfoDataToIp();
			//QueryMng.
			//GetInsertVoiceLineTestReqQuery();



		}

		/// <summary>
		/// 방송회선 점검 결과 수신 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc22(NCasProtocolBase protoBase){

			//ProcTc22Tc30();


		}

		/// <summary>
		/// 방송회선 점검 결과 수신 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc30(NCasProtocolBase protoBase){

			//ProcTc22Tc30();


		}

		/// <summary>
		/// 단말 출입 상태 이벤트 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc23(NCasProtocolBase protoBase){

			//BasicDataMng.OpenDataBase();
			//BaseDataMng.GetMasterInfoDataToIp();
			//QueryMng.
			//GetInsertTermLoginHistQuery(true);
			//QueryMng.
			//GetInsertTermLoginHistQuery(false);
			//QueryMng.
			//GetInsertTermLoginHistQuery(true);
			//QueryMng.GetUpdateTermLoginHistQuery();



		}

		/// <summary>
		/// 장비감시 결과 데이터를 입력한다.
		/// </summary>
		/// <param name="protoBase"></param>
		private void ProcTc88(NCasProtocolBase protoBase){

			//ProcTc8Tc88(NcasProtocolBase);


		}

		/// <summary>
		/// oracleDb가 연결되어있는지 확인하고 알아서 Close한다.
		/// </summary>
		private void CloseDataBase(){

			////큐카운트확인하여 종료
			//if(oracleDb != null)
			//oracleDb.Close();


		}

		/// <summary>
		/// oracleDb를 가지고 DB에 접속하면 접속 성공여부를 반환한다.
		/// </summary>
		private bool OpenDataBase(){

			////DB가 오픈상태인지 확인
			//bool isConnect = false;
			//NCasOracleDb.Open(...);
			//isConnect=NCasOracleDb.IsOpen;
			//return isConnect;


			return false;
		}

		/// <summary>
		/// 초기화
		/// </summary>
		public void Init(){

			//InitNet();


		}

		/// <summary>
		/// TCP에서 데이터를 수신받으면 해당 이벤트가 발생한다.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnNCasNetSessionRecvEventHandler(object sender, NCasNetSessionRecvEventArgs e){

			//List<NCasProtocolBase> lstProtocol=null;
			//
			//NCasNetSessionContext
			//context=tcpServerMng.
			//GetNCasNetSessionContext(e.NCasProfile.
			//IpAddr, e.NCasProfile.Port);
			//NCasNetDataReceiver.ParseNCasPacket(e.
			//Buff, e.len, contexxt.TcpClient, out
			//lstResult);
			//foreach(NCasProtocolBase p in
			//lstResult)
			//{AddBizData(p);}



		}

		/// <summary>
		/// TCP연결이 끊어졌을 때 발생하는 이벤트
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnNCasNetSessionCloseEventHandler(object sender, NCasNetSessionCloseEventArgs e){

			//mainForm.SetProfileStatus(e.NCasProfile,
			//false);


		}

		/// 
		/// <param name="param"></param>
		protected override void OnAsyncDataProcessing(NCasObject param){

			////내가처리해야하는데이터이면
			//AddOutputData();


		}

		/// <summary>
		/// TCP클라이언트와 연결이 되었을 때 발생하는 이벤트
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnNCasNetSessionAcceptEventHandler(object sender, NCasNetSessionAcceptEventArgs e){

			//mainForm.SetProfileStatus(e.NCasProfile,
			//true);


		}

		/// <summary>
		/// TCP를 소멸한다.
		/// </summary>
		private void UnInitTcp(){

			//tcpServerMng.StopSessionServerMng();


		}

		/// <summary>
		/// UDP를 소멸한다.
		/// </summary>
		private void UnInitUdpNet(){

			//udpSocket.Stop();


		}

		/// <summary>
		/// 네트워크를 소멸한다.
		/// </summary>
		private void UnInitNet(){

			//UnInitUdp();
			//UnInitTcp();


		}

		/// <summary>
		/// TP통신을 초기화 한다.
		/// </summary>
		private void InitTcpNet(){

			//NCasProfile profile=new NCasProfile();
			//profile.IpAddr=ip;
			//profile.Name=name;
			//tcpServerMng.AddProfile(profile);
			//NCasProtocolBase
			//proto=NCasProtocolFactory.
			//CreateCasProtocol(NCasDefineTcCode.
			//TcDevStsReq);
			//tcpServerMng.
			//PollingDatas=NCasProtocolFactory.
			//MakeTcpFrame(proto);
			////Register Event
			//tcpServerMng.StartSessionServerMng("127.
			//0.0.1",port);


		}

		/// <summary>
		/// UDP통신을 초기화 한다.
		/// </summary>
		private void InitUdpNet(){

			//NCasUdpSocket udpSocket=new
			//NCasUdpSocket();
			//udpSocket.Listen("127.0.0.1", 7004);


		}

		/// <summary>
		/// 네트워크 설정을 초기화한다.
		/// </summary>
		private void InitNet(){

			//InitUdpNet();
			//InitTcpNet();


		}

		/// <summary>
		/// UDP데이터 수신 이벤트
		/// </summary>
		/// <param name="obj"></param>
		/// <param name="args"></param>
		private void OnRecvUdpSocket(object obj, NCasUdpRecvEventArgs args){

			////Packet Parse
			//AddBizData(pase);


		}

		/// <summary>
		/// 소멸자
		/// </summary>
		public void UnInit(){

			//UnInitNet();
			//CloseDataBase();


		}

		/// 
		/// <param name="param"></param>
		protected override void OnAsyncArchiveProcessing(NCasObject param){

			//switch(NCasObject)case TC


		}

		/// 
		/// <param name="param"></param>
		protected override void OnAsyncExternProcessing(NCasObject param){

		}

		/// 
		/// <param name="param"></param>
		protected override void OnAsyncDispProcessing(NCasObject param){

		}

	}//end DbManagerBiz

}//end namespace DBManagerBizContainers