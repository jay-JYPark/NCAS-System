///////////////////////////////////////////////////////////
//  QueryMng.cs
//  Implementation of the Class QueryMng
//  Generated by Enterprise Architect
//  Created on:      20-4-2015 오후 4:14:19
//  Original author: ahnyj ahnyj
///////////////////////////////////////////////////////////




using NCasPDbManager.DataContainers;
namespace NCasPDbManager.DBManagerBizContainers.QueryMngContrainers {
	/// <summary>
	/// 쿼리문을 완성해서 반환해주는 클래스
	/// </summary>
	public class QueryMng {

		public QueryMng(){

		}

		~QueryMng(){

		}

		/// <summary>
		/// 문자방송 메세지를 저장한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="section"></param>
		public static string GetCheckBroadCaptionHistQuery(DateTime occurTime, int areaCode, int section){

			return "";
		}

		/// <summary>
		/// 방송 응답 결과 데이터를 입력하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="section"></param>
		/// <param name="source"></param>
		/// <param name="kind"></param>
		/// <param name="media"></param>
		/// <param name="closeProcFlag"></param>
		/// <param name="respResultFlag"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetInsertPreBroadRespResultHistQuery(NCasDefineOrderMode orderMode, DateTime occurTime, int areaCode, int broadCtrlFlag, int section, int source, int kind, int media, int closeProcFlag, int respResultFlag, int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// 방송발령 데이터를 입력하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="occurTime"></param>
		/// <param name="oldSection"></param>
		/// <param name="newSection"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="source"></param>
		/// <param name="kind"></param>
		/// <param name="media"></param>
		/// <param name="respReqFlag"></param>
		/// <param name="closeProcFlag"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetInsertBroadOrderHistQuery(NCasDefineOrderMode orderMode, DateTime occurTime, int oldSection, int newSection, int areaCode, int broadCtrlFlag, int source, int kind, int media, int respReqFlag, int closeProcFlag, int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// BroadOrderHist테이블에 해당 발령이 있는는지 확인하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="occurTime"></param>
		/// <param name="section"></param>
		/// <param name="devKind"></param>
		public static string GetCheckHaveBroadOrderHistQuery(NCasDefineOrderMode orderMode, DateTime occurTime, int section, int devKind){

			return "";
		}

		/// <summary>
		/// 장비상태 값을 저장한다.(이상 발생 시)
		/// </summary>
		/// <param name="devCode"></param>
		/// <param name="occurTime"></param>
		/// <param name="pointCode"></param>
		/// <param name="pointValue"></param>
		public static string GetInsertTermStatusHistQuery(int devCode, DateTime occurTime, int pointCode, int pointValue){

			return "";
		}

		/// <summary>
		/// 이상이 발생한 장비값을 정상 또는 다른 값으로 업데이트하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="recoverTime"></param>
		/// <param name="recoverValue"></param>
		/// <param name="devCode"></param>
		/// <param name="pointCode"></param>
		public static string GetUpdateTermStatusHistQuery(DateTime recoverTime, int recoverValue, int devCode, int pointCode){

			return "";
		}

		/// <summary>
		/// 해당 데이터 단말의 로그인 이력이 있는지 확인하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="code"></param>
		public static string GetCheckHaveLoginHistQuery(int code){

			return "";
		}

		/// <summary>
		/// 로그아웃 시 업데이트 하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="logoutTime"></param>
		/// <param name="devCode"></param>
		public static string GetUpdateTermLoginHistQuery(DateTime logoutTime, int devCode){

			return "";
		}

		/// <summary>
		/// 로그인 했을 경우 데이터를 입력하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="isInvasion"></param>
		/// <param name="devCode"></param>
		/// <param name="logInTime"></param>
		/// <param name="logOutTime"></param>
		/// <param name="loginId"></param>
		public static string GetInsertTermLoginHistQuery(bool isInvasion, int devCode, DateTime logInTime, DateTime logOutTime, string loginId){

			return "";
		}

		/// <summary>
		/// 음성회선감시 결과를 입력하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="ip"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="status"></param>
		public static string GetInsertVoiceLineTestResultHistQuery(DateTime occurTime, string ip, int devCode, int devKind, int status){

			return "";
		}

		/// <summary>
		/// 방송회선 점검 요구 데이터 입력 쿼리문을 반환한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="ip"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetInsertVoiceLineTestReqQuery(DateTime occurTime, string ip, int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// 이상이었던 데이터를 정상으로 업데이트 하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetUpdateSateTestResultHistQuery(int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// 정상으로 올라온 데이터의 결과를 삭제한다.
		/// </summary>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="occurTime"></param>
		public static string GetDeleteSateTestResultHistQuery(int devCode, int devKind, DateTime occurTime){

			return "";
		}

		/// <summary>
		/// 위성 수신기 감시 요구에 따른 결과를 입력하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="isCenter"></param>
		/// <param name="occurTime"></param>
		/// <param name="recoverTime"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="result"></param>
		/// <param name="provCode"></param>
		public static string GetInsertSateTestResultHistQuery(bool isCenter, DateTime occurTime, DateTime recoverTime, int devCode, int devKind, int result, int provCode){

			return "";
		}

		/// <summary>
		/// 위성수신기 감시요구 데이터를 입력한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="source"></param>
		/// <param name="ip"></param>
		/// <param name="media"></param>
		/// <param name="closeProcFlag"></param>
		public static string GetInsertSateTestOrderHistQuery(DateTime occurTime, int source, string ip, int media, int closeProcFlag){

			return "";
		}

		/// <summary>
		/// 문자방송 메세지 이력을 저장한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="orderMode"></param>
		/// <param name="media"></param>
		/// <param name="section"></param>
		/// <param name="kind"></param>
		/// <param name="caption"></param>
		public static string GetInsertBroadCaptionHistQuery(DateTime occurTime, int areaCode, int orderMode, int media, int section, int kind, string caption){

			return "";
		}

		/// <summary>
		/// 방송 응답결과 데이터가 테이블에 있는지 확인하는 쿼리를 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="occurTime"></param>
		/// <param name="source"></param>
		/// <param name="devCode"></param>
		public static string GetCheckHaveBroadRespResultHistQuery(NCasDefineOrderMode orderMode, DateTime occurTime, int source, int devCode){

			return "";
		}

		/// <summary>
		/// 장비이상 정상 데이터가 들어왔을 때 정상값으로 업데이트하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="recoverTime"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetUpdateFaultDeviceDataQuery(DateTime occurTime, DateTime recoverTime, int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// 장비이상 데이터를 입력하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="occurTime"></param>
		/// <param name="recoverTime"></param>
		/// <param name="faultTime"></param>
		/// <param name="devUseFlag"></param>
		public static string GetInsertFaultDeviceDataQuery(int devCode, int devKind, DateTime occurTime, DateTime recoverTime, int faultTime, int devUseFlag){

			return "";
		}

		/// <summary>
		/// 장애가 발생한 단말 데이터가 들어있는지 확인하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetCheckHaveFaultDeviceDataQuery(DateTime occurTime, int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// 해당 발령이 테이블에 있는지 확인한다.
		/// 이미 발령된 발령 데이터인지 확인한다.
		/// 실제일지 시험인지 NCasDefineOrderMode를 넘겨준다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="orderControlKind"></param>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="source"></param>
		public static string GetCheckHaveOrderHistQuery(NCasDefineOrderMode orderMode, NCasDefineControlKind orderControlKind, DateTime occurTime, int areaCode, int source){

			return "";
		}

		/// <summary>
		/// 발령 데이터가 없는 응답 결과 데이터를 저장하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="orderTime"></param>
		/// <param name="respResultTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="section"></param>
		/// <param name="source"></param>
		/// <param name="devKind"></param>
		/// <param name="kind"></param>
		/// <param name="devCode"></param>
		/// <param name="media"></param>
		/// <param name="captionCode"></param>
		/// <param name="closeProcFlag"></param>
		/// <param name="respResultFlag"></param>
		public static string GetInsertPreBroadRespResultHistQuery(NCasDefineOrderMode orderMode, DateTime orderTime, DateTime respResultTime, int areaCode, int broadCtrlFlag, int section, int source, int devKind, int kind, int devCode, int media, int captionCode, int closeProcFlag, int respResultFlag){

			return "";
		}

		/// <summary>
		/// 방송 응답 결과 정보를 업데이트하는 쿼리를 반환한다.
		/// </summary>
		/// <param name="NCasDefineOrderMode"></param>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="section"></param>
		/// <param name="kind"></param>
		/// <param name="media"></param>
		/// <param name="cloaseProcFlag"></param>
		/// <param name="respFlag"></param>
		/// <param name="respResultTime"></param>
		/// <param name="devCode"></param>
		/// <param name="source"></param>
		public static string GetUpdateBroadRespResultHist(orderMode NCasDefineOrderMode, DateTime occurTime, int areaCode, int broadCtrlFlag, int section, int kind, int media, int cloaseProcFlag, int respFlag, DateTime respResultTime, int devCode, int source){

			return "";
		}

		/// <summary>
		/// 해당 응답결과 데이터가 들어있는지 확인하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="respResultKind"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="source"></param>
		public static string GetCheckHaveAlarmRespResultHistQuery(NCasDefineOrderMode orderMode, NCasDefineTcCode respResultKind, int devCode, int devKind, int source){

			return "";
		}

		/// <summary>
		/// 발령정보가 없는 응답 결과 데이터를 Pre테이블에 저장하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="respResultKind"></param>
		/// <param name="occurTime"></param>
		/// <param name="respResultTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="section"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="source"></param>
		/// <param name="kind"></param>
		/// <param name="media"></param>
		/// <param name="closeProcFlag"></param>
		/// <param name="respResultFlag"></param>
		public static string GetInsertPreAlarmRespResultHistQuery(NCasDefineOrderMode orderMode, NCasDefineTcCode respResultKind, DateTime occurTime, DateTime respResultTime, int areaCode, int broadCtrlFlag, int section, int devCode, int devKind, int source, int kind, int media, int closeProcFlag, int respResultFlag){

			return "";
		}

		/// <summary>
		/// Pre테이블에 있는 데이터를  처리한 후 해당 Pre테이블에 있는 데이터를 삭제하는 쿼리를 반환한다.
		/// </summary>
		/// <param name="occurTime"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="source"></param>
		public static string GetDeletePreAlarmRespResultHistQuery(DateTime occurTime, int devCode, int devKind, int source){

			return "";
		}

		/// <summary>
		/// PreResult, PreResp테이블에 해당 발령에 대한 정보가 있으면 업데이트를 하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="orderSection"></param>
		/// <param name="respResultTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="section"></param>
		/// <param name="kind"></param>
		/// <param name="media"></param>
		/// <param name="respResultFlag"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		/// <param name="source"></param>
		public static string GetUpdateAlarmRespResultHistQuery(NCasDefineORderMode orderMode, NCasDefineSectionCode orderSection, DateTime respResultTime, int areaCode, int broadCtrlFlag, int section, int kind, int media, int respResultFlag, int devCode, int devKind, int source){

			return "";
		}

		/// <summary>
		/// 미리들어온 응답, 결과가 있는지 확인하는 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="respResultKind"></param>
		/// <param name="orderMode2"></param>
		/// <param name="occurTime"></param>
		public static string GetCheckHavePreAlarmRespResultHistQuery(NCasDefineOrderMode orderMode, NCasDefineTcCode respResultKind, int orderMode2, DateTime occurTime){

			return "";
		}

		/// <summary>
		/// 응답 결과 데이터를 저장하기 위한 쿼리문을 반환한다.
		/// </summary>
		/// <param name="orderMode"></param>
		/// <param name="orderSource"></param>
		/// <param name="respResultKind"></param>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="section"></param>
		/// <param name="source"></param>
		/// <param name="kind"></param>
		/// <param name="media"></param>
		/// <param name="closeProcFlag"></param>
		/// <param name="respFlag"></param>
		/// <param name="devCode"></param>
		/// <param name="devKind"></param>
		public static string GetInsertAlarmRespResultHistQuery(NCasDefineOrderMode orderMode, NCasDefineSectionCode orderSource, NCasDefineTcCode respResultKind, DateTime occurTime, int areaCode, int broadCtrlFlag, int section, int source, int kind, int media, int closeProcFlag, int respFlag, int devCode, int devKind){

			return "";
		}

		/// <summary>
		/// AlarmOrderHist 테이블에 Insert하는 쿼리문을 불러온다.
		/// </summary>
		/// <param name="NCasDefineOrderMode"></param>
		/// <param name="occurTime"></param>
		/// <param name="areaCode"></param>
		/// <param name="broadCtrlFlag"></param>
		/// <param name="source"></param>
		/// <param name="kind"></param>
		/// <param name="section"></param>
		/// <param name="media"></param>
		/// <param name="respreqflag"></param>
		/// <param name="closeProcFlag"></param>
		public static string GetInsertAlarmOrderHistQuery(orderMode NCasDefineOrderMode, DateTime occurTime, int areaCode, int broadCtrlFlag, int source, int kind, int section, int media, int respreqflag, int closeProcFlag){

			return "";
		}

	}//end QueryMng

}//end namespace QueryMngContrainers